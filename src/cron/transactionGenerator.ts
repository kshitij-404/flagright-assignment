import cron from "node-cron";
import TransactionModel from "../models/transaction";
import { type, transactionState, Country } from "../types/transaction";
import { TAGS, DESCRIPTIONS, CURRENCIES } from "../utils/constants";

let task: cron.ScheduledTask | null = null;

const getRandomElement = <T>(array: T[]): T =>
  array[Math.floor(Math.random() * array.length)];  

export const startTransactionGenerator = () => {
  if (task) {
    console.log("Transaction generator is already running.");
    return;
  }

  task = cron.schedule("* * * * * *", async () => {
    try {
      const newTransaction = new TransactionModel({
        type: getRandomElement(Object.values(type)),
        transactionId: `txn_${Date.now()}`,
        timestamp: Date.now(),
        originUserId: `user${Math.floor(Math.random() * 10) + 1}`,
        destinationUserId: `user${Math.floor(Math.random() * 10) + 1}`,
        transactionState: getRandomElement(Object.values(transactionState)),
        originAmountDetails: {
          transactionAmount: Math.floor(Math.random() * 1000),
          transactionCurrency: getRandomElement(CURRENCIES),
          country: getRandomElement(Object.values(Country)),
        },
        destinationAmountDetails: {
          transactionAmount: Math.floor(Math.random() * 1000),
          transactionCurrency: getRandomElement(CURRENCIES),
          country: getRandomElement(Object.values(Country)),
        },
        promotionCodeUsed: Math.random() < 0.5,
        reference: "Generated by CRON",
        originDeviceData: {
          batteryLevel: 100,
          deviceLatitude: 37.7749,
          deviceLongitude: -122.4194,
          ipAddress: "127.0.0.1",
          deviceIdentifier: "device1",
          vpnUsed: false,
          operatingSystem: "iOS",
          deviceMaker: "Apple",
          deviceModel: "iPhone 12",
          deviceYear: "2020",
          appVersion: "1.0.0",
        },
        destinationDeviceData: {
          batteryLevel: 100,
          deviceLatitude: 37.7749,
          deviceLongitude: -122.4194,
          ipAddress: "127.0.0.1",
          deviceIdentifier: "device2",
          vpnUsed: false,
          operatingSystem: "iOS",
          deviceMaker: "Apple",
          deviceModel: "iPhone 12",
          deviceYear: "2020",
          appVersion: "1.0.0",
        },
        tags: getRandomElement(TAGS),
        description: getRandomElement(DESCRIPTIONS),
      });

      await newTransaction.save();
      console.log("Transaction generated:", newTransaction.transactionId);
    } catch (error) {
      console.error("Failed to generate transaction:", error);
    }
  });

  console.log("Transaction generator started.");
};

export const stopTransactionGenerator = () => {
  if (task) {
    task.stop();
    task = null;
    console.log("Transaction generator stopped.");
  } else {
    console.log("Transaction generator is not running.");
  }
};
